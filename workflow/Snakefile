from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("7.8.5")

##### setup report ########
configfile: "config/config.yaml"

##### load rules ##########
include: "rules/common.smk"

crams = pd.read_csv(config["crams"], sep=",", dtype={"sample": str, "cram_location": str}).set_index("sample")
FILES = crams.to_dict()["cram_location"]
SAMPLES = crams.index.tolist()

wildcard_constraints:
    sample = "|".join(SAMPLES)

rule all:
    input:
        "results/hiPhivePrioritiser.html",
        "results/phenixPrioritiser.html",
        "results/phivePrioritiser.html",
        "results/exomeWalkerPrioritiser.html"

rule samtools_extract:
    input:
        lambda wildcards: FILES[wildcards.sample]
    output:
        fq1 = "input_reads/{sample}_1.fq.gz",
        fq2 = "input_reads/{sample}_2.fq.gz",
        fq  = temp("input_reads/{sample}.fq.gz")
    log:
        "logs/extract/{sample}.log"
    threads:
        4
    envmodules:
        "samtools/1.9"
    resources:
        mem_mb = get_mem_mb,
        runtime = "01:00:00"
    shell:
        "samtools sort -n -@ {threads} {input} | "
        "samtools fastq -@ {threads} - "
        "-1 {output.fq1} "
        "-2 {output.fq2} "
        "-s {output.fq} > /dev/null"

rule bwa_align:
    input:
        fq1 = "input_reads/{sample}_1.fq.gz",
        fq2 = "input_reads/{sample}_2.fq.gz",
        reference = config["reference"]
    output:
        "namesorted_alignments/{sample}.alignment.bam"
    log:
        "logs/align/{sample}.log"
    envmodules:
        "gcc/9.2.0",
        "bwa/0.7.17",
        "samtools/1.9"
    params:
        bwa_params="\"@RG\\tID:{sample}\\tSM:{sample}\\tPL:illumina\"",
        samblaster_bin=config["samblaster"],
    threads:
        10
    resources:
        mem_mb=get_mem_mb,
        runtime="10:00:00"
    shell:
        "bwa mem -t {threads} -Y -R {params.bwa_params} -K 100000000 "
        "{input.reference} {input.fq1} {input.fq2} | "
        "{params.samblaster_bin} --addMateTags | "
        "samtools view -b -@ {threads} -o {output} -"

rule samtools_sortindex:
    input:
        "namesorted_alignments/{sample}.alignment.bam"
    output:
        bam = "alignments/{sample}.alignment.bam",
        bai = "alignments/{sample}.alignment.bam.bai"
    log:
        "logs/index/{sample}.log"
    threads:
        10
    envmodules:
        "samtools/1.9"
    resources:
        mem_mb=get_mem_mb,
        runtime="10:00:00"
    shell:
        """
        samtools sort -T {wildcards.sample} -@ {threads} -O BAM -o {output.bam} {input}
        samtools index {output.bam}
        """

rule alignstats_stats:
    input:
        "alignments/{sample}.alignment.bam"
    output:
        "alignments/{sample}.stats"
    log:
        "logs/stats/{sample}.log"
    threads:
        1
    resources:
        mem_mb=get_mem_mb,
        runtime="05:00:00"
    params:
        alignstat_target=config["target_bed"],
        alignstat_bin=config["alignstats"]
    shell:
        "{params.alignstat_bin} -i {input} -o {output} "
        "-p -W -P {threads} -t {params.alignstat_target} "

rule freebayes_callvariants:
    input:
        bam = expand("alignments/{sample}.alignment.bam", sample=SAMPLES),
        reference = config["reference"]
    output:
        "variants/variants.vcf"
    log:
        "logs/variants/variants.log"
    threads:
        20
    envmodules:
        "gcc/11.2.0",
        "parallel/20200322",
    resources:
        mem_mb=get_mem_mb,
        runtime="2-00:00:00"
    params:
        freebayes_dir=config["freebayes"],
        target_bed=config["target_bed"],
    shell:
        """
        export PATH={params.freebayes_dir}/build:{params.freebayes_dir}/scripts:{params.freebayes_dir}/vcflib/bin:$PATH && freebayes-parallel <(awk '{{print $1":"$2"-"$3}}' {params.target_bed}) {threads} --fasta-reference {input.reference} {input.bam}  > variants/variants.vcf
        """

# add script to improve filtering. Set genotypes as missing on sex chromosomes
# if there is a violation of ploidy. Also investigate some ML methods for 
# filtering freebayes calls that can leverage familial relationships.
rule vcffilter_filter:
    input:
        "variants/variants.vcf"
    output:
        "variants/variants.flt.vcf"
    log:
        "logs/variants/variants.flt.log"
    threads:
        1
    envmodules:
        "gcc/11.2.0"
    resources:
        mem_mb=get_mem_mb,
        runtime="04:00:00"
    params:
        freebayes_dir=config["freebayes"]
    shell:
        """
        export PATH={params.freebayes_dir}/build:{params.freebayes_dir}/scripts:{params.freebayes_dir}/vcflib/bin:$PATH && vcffilter -f "QUAL > 1 & QUAL / AO > 10 & SAF > 0 & SAR > 0 & RPR > 1 & RPL > 1" -t "PASS" -F "FAIL" {input} > {output}
        """

rule bgzip_zip:
    input:
        "variants/variants.flt.vcf"
    output:
        "variants/variants.flt.vcf.gz"   
    log:
        "logs/variants/bgzip.log"
    threads:
        4
    envmodules:
        "gcc/9.2.0",
        "htslib/1.10.2"
    resources:
        mem_mb=get_mem_mb,
        runtime="01:00:00"
    shell:      
        "bgzip -@ {threads} {input}"

rule tabix_index:
    input:
        "variants/variants.flt.vcf.gz"
    output:
        "variants/variants.flt.vcf.gz.tbi"
    log:
        "logs/variants/tabix.log"
    threads:
        1
    envmodules:
        "gcc/9.2.0",
        "htslib/1.10.2"
    resources:
        mem_mb=get_mem_mb,
        runtime="01:00:00"
    shell:
        "tabix {input}"

rule bcftools_annt:
    input:
        vcf="variants/variants.flt.vcf.gz",
        index="variants/variants.flt.vcf.gz.tbi"
    output:
        "variants/variants.flt.ann.vcf.gz"
    log:
        "logs/variants/lcr.log"
    threads:
        1
    envmodules:
        "htslib/1.10.2",
        "bcftools/1.9"
    resources:
        mem_mb=get_mem_mb,
        runtime="02:00:00"
    params:
        lcr_bed=config["LCR_bed"]
    shell:
        """
        bcftools annotate -a {params.lcr_bed} -h <(echo "##INFO=<ID=LCR,Number=0,Type=Flag,Description=\"Variant overlaps a low-complexity region as determined using DUST\">") -c CHROM,FROM,TO,LCR {input.vcf} -Oz -o {output}
        """

use rule tabix_index as tabix_index_ann with:
    input:
        "variants/variants.flt.ann.vcf.gz"
    output:
        "variants/variants.flt.ann.vcf.gz.tbi"
    log:
        "logs/variants/tabix.ann.log"


rule variantqc_stats:
    input:
        vcf="variants/variants.flt.ann.vcf.gz",
        ped=config["ped"],
        reference=config["reference"]
    output:
        "variants/variant_qc.html"
    log:
        "logs/variants/variantqc.log"
    threads:
        2
    envmodules:
        "java/1.8.0"
    resources:
        mem_mb=get_mem_mb,
        runtime="01:00:00"
    params:
        variantqc_jar=config["DISCVRSeq"]
    shell:
        "java -jar {params.variantqc_jar} VariantQC -R {input.reference} -ped {input.ped} -V {input.vcf} -O {output}"

rule vt_decnorm:
    input:
        vcf="variants/variants.flt.ann.vcf.gz",
        reference=config["reference"]
    output:
        "variants/variants.flt.ann.vt.vcf.gz"
    log:
        "logs/variants/vt.log"
    threads:
        2
    envmodules:
        "gcc/9.2.0",
        "htslib/1.10.2"
    resources:
        mem_mb=get_mem_mb,
        runtime="02:00:00"
    params:
        vt_bin=config["vt"]
    shell:
        "{params.vt_bin} decompose -s {input.vcf} | "
        "{params.vt_bin} normalize -r {input.reference} - | "
        "bgzip -c > {output}"

use rule tabix_index as tabix_index_vt with:
    input:
        "variants/variants.flt.ann.vt.vcf.gz"
    output:
        "variants/variants.flt.ann.vt.vcf.gz.tbi"
    log:
        "logs/variants/tabix.vt.log"

rule triodenovo_find:
    input:
        "variants/variants.flt.ann.vt.vcf.gz"
    output:
        "variants/denovo_variants.flt.vt.ann.vcf"
    log:
        "logs/variants/denovo.log"
    threads:
        1
    resources:
        mem_mb=get_mem_mb,
        runtime="05:00:00"
    params:
        triodenovo_bin=config["triodenovo"],
        ped_file=config["ped"],
        xchrom=config["xchrom"],
        ychrom=config["ychrom"]
    shell:
        """
        {params.triodenovo_bin} --ped {params.ped_file} --in_vcf {input} --out_vcf {output} --minDepth 10 --chrX {params.xchrom}
        """

rule denovo_filter:
    input:
        vcf="variants/denovo_variants.flt.vt.ann.vcf",
        ped=config["ped"]
    output:
        vcf="variants/filtered_denovo_variants.flt.vt.ann.vcf"
    log:
        "logs/variants/denovo_filter.log"
    threads:
        1
    resources:
        mem_mb=get_mem_mb,
        runtime="01:00:00"
    run:
        proband = None
        mother = None
        father = None
        with open(input.ped, 'r') as f:
            for line in f:
                tokens = line.strip().split('\t')
                if tokens[5] == '2':
                    proband = tokens[1]
                else:
                    if tokens[4] == '1':
                        father = tokens[1]
                    elif tokens[4] == '2':
                        mother = tokens[1]
        assert proband is not None
        assert mother is not None
        assert father is not None

        probandi = None
        motheri = None
        fatheri = None
        with open(input.vcf, 'r') as f:
            for line in f:
                if line.startswith("#CHROM"):
                    tokens = line.strip().split("\t")
                    probandi = tokens.index(proband)
                    motheri = tokens.index(mother)
                    fatheri = tokens.index(father)
                    break
        assert probandi is not None
        assert motheri is not None
        assert fatheri is not None

        with open(input.vcf, 'r') as f, open(output.vcf, 'w') as g:
            for line in f:
                if line.startswith("#"):
                    print(line.strip(), file=g)
                else:
                    tokens = line.strip().split("\t")
                    assert tokens[8].split(":")[0] == "GT"
                    proband_gt = tokens[probandi].split(":")[0]
                    mother_gt = tokens[motheri].split(":")[0]
                    father_gt = tokens[fatheri].split(":")[0]
                    hom_ref = [f"{tokens[3]}/{tokens[3]}", f"{tokens[3]}"]
                    het = [f"{tokens[3]}/{tokens[4]}", f"{tokens[4]}"]
                    if tokens[6] == "PASS" and \
                        father_gt in hom_ref and \
                        mother_gt in hom_ref and \
                        proband_gt in het:
                        print(line.strip(), file=g)

rule bcftools_annt_denovo:
    input:
        vcf="variants/variants.flt.ann.vt.vcf.gz",
        denovo="variants/filtered_denovo_variants.flt.vt.ann.vcf"
    output:
        "variants/final.vcf.gz"
    log:
        "logs/variants/final.log"
    threads:
        1
    envmodules:
        "htslib/1.10.2",
        "bcftools/1.9"
    resources:
        mem_mb=get_mem_mb,
        runtime="02:00:00"
    shell:
        """
        bcftools query -f '%CHROM\t%POS\t1\n' {input.denovo} | bgzip -c > variants/variants.pos.gz
        tabix -s1 -b2 -e2 variants/variants.pos.gz
        bcftools annotate -a variants/variants.pos.gz -h <(echo "##INFO=<ID=DENOVO,Number=0,Type=Flag,Description=\"A denovo variant that passed filters\">") -c CHROM,POS,DENOVO {input.vcf} -Oz -o {output}
        rm variants/variants.pos.gz variants/variants.pos.gz.tbi
        """

use rule tabix_index as tabix_index_final with:
    input:
        "variants/final.vcf.gz"
    output:
        "variants/final.vcf.gz.tbi"
    log:
        "logs/variants/tabix.final.log"

# Right now this dumps a string with the right config to a file, but I should
# change this to a actual YML config
rule exomiser_create_config:
    input:
        reference = config["reference"],
        vcf = "variants/final.vcf.gz",
        vcfi = "variants/final.vcf.gz.tbi",
        ped = config["ped"],
        hpo = config["hpo"]
    output:
        "exomiser/hiPhive_config.yml"
    log:
        "logs/exomiser/hiPhive_config.log"
    threads:
        1
    resources:
        mem_mb = get_mem_mb,
        runtime = "01:00:00"
    params:
        prioritiser = "hiPhivePrioritiser",
        prioritiser_params = '',
        priority = "HIPHIVE_PRIORITY"
    run:
        import yaml
        import sys
 
        with open(input.hpo) as f: hpo = f.read().splitlines()

        ref_file = input.reference
        if ref_file.endswith("human_g1k_v37_decoy.fasta"):
            ref = "hg19"
        elif ref_file.endswith("hs38DH.fa"):
            ref = "hg38"
        else:
            print("unknown reference input to exomiser", file=sys.stderr)
            exit(1)

        proband = None
        with open(input.ped, 'r') as f:
            for line in f:
                tokens = line.strip().split('\t')
                if tokens[5] == '2':
                    proband = tokens[1]
                    break
        assert proband is not None

        vcf_file = input.vcf
        ped_file = input.ped
        prioritiser = params.prioritiser 
        prioritiser_params = params.prioritiser_params
        priority = params.priority

        initial_string = f"analysis:\n    genomeAssembly: {ref}\n    vcf: {vcf_file}\n    ped: {ped_file}\n    proband: {proband}\n    hpoIds: {hpo}\n"

        constant_string1 = "    inheritanceModes: {\n            AUTOSOMAL_DOMINANT: 0.1,\n            AUTOSOMAL_RECESSIVE_HOM_ALT: 0.1,\n            AUTOSOMAL_RECESSIVE_COMP_HET: 2.0,\n            X_DOMINANT: 0.1,\n            X_RECESSIVE_HOM_ALT: 0.1,\n            X_RECESSIVE_COMP_HET: 2.0,\n            MITOCHONDRIAL: 0.2\n    }\n    analysisMode: PASS_ONLY\n    frequencySources: [\n        THOUSAND_GENOMES,\n        TOPMED,\n        UK10K,\n        ESP_AFRICAN_AMERICAN, ESP_EUROPEAN_AMERICAN, ESP_ALL,\n        EXAC_AFRICAN_INC_AFRICAN_AMERICAN, EXAC_AMERICAN,\n        EXAC_SOUTH_ASIAN, EXAC_EAST_ASIAN,\n        EXAC_FINNISH, EXAC_NON_FINNISH_EUROPEAN,\n        EXAC_OTHER,\n        GNOMAD_E_AFR,\n        GNOMAD_E_AMR,\n        GNOMAD_E_ASJ,\n        GNOMAD_E_EAS,\n        GNOMAD_E_FIN,\n        GNOMAD_E_NFE,\n        GNOMAD_E_OTH,\n        GNOMAD_E_SAS,\n        GNOMAD_G_AFR,\n        GNOMAD_G_AMR,\n        GNOMAD_G_ASJ,\n        GNOMAD_G_EAS,\n        GNOMAD_G_FIN,\n        GNOMAD_G_NFE,\n        GNOMAD_G_OTH,\n        GNOMAD_G_SAS\n        ]\n    pathogenicitySources: [REVEL, MVP, CADD]\n    steps: [\n        failedVariantFilter: {},\n        variantEffectFilter: {\n            remove: [\n                FIVE_PRIME_UTR_EXON_VARIANT,\n                FIVE_PRIME_UTR_INTRON_VARIANT,\n                THREE_PRIME_UTR_EXON_VARIANT,\n                THREE_PRIME_UTR_INTRON_VARIANT,\n                NON_CODING_TRANSCRIPT_EXON_VARIANT,\n                UPSTREAM_GENE_VARIANT,\n                INTERGENIC_VARIANT,\n                REGULATORY_REGION_VARIANT,\n                CODING_TRANSCRIPT_INTRON_VARIANT,\n                NON_CODING_TRANSCRIPT_INTRON_VARIANT,\n                DOWNSTREAM_GENE_VARIANT\n            ]\n        },\n        frequencyFilter: {maxFrequency: 2.0},\n        pathogenicityFilter: {keepNonPathogenic: true},\n        inheritanceFilter: {},\n        omimPrioritiser: {},\n"

        priority_string1 = f"        {prioritiser}: { {prioritiser_params} },\n"
        constant_string2 = "        priorityScoreFilter: {priorityType: "
        priority_string2 = f"{priority}"
        constant_string3 = ", minPriorityScore: 0.501}\n        ]\noutputOptions:\n    outputContributingVariantsOnly: true\n    numGenes: 10\n    outputPrefix:"
        priority_string3 = f" exomiser/{prioritiser}"
        constant_string4 = "\n    outputFormats: [HTML, JSON, TSV_GENE, TSV_VARIANT, VCF]"
    
        with open(output[0], 'w') as f:
            print(initial_string + constant_string1 + priority_string1.replace('\'', '') + constant_string2 + priority_string2 + constant_string3 + priority_string3 + constant_string4, file=f)

use rule exomiser_create_config as exomiser_create_phenix_config with:
    output:
        "exomiser/phenix_config.yml"
    log:
        "logs/exomiser/phenix_config.log"
    params:
        prioritiser = "phenixPrioritiser",
        prioritiser_params = '',
        priority = "PHENIX_PRIORITY"

use rule exomiser_create_config as exomiser_create_phive_config with:
    output:
        "exomiser/phive_config.yml"
    log:
        "logs/exomiser/phive_config.log"
    params:
        prioritiser = "phivePrioritiser",
        prioritiser_params = '',
        priority = "PHIVE_PRIORITY"

# currently the seeds include genes from clinVar that are pathogenic, implicated
# in heterotaxy and lead to a protein change. This should read from a data
# file that can easily be updated. The ids are ENTREZ
use rule exomiser_create_config as exomiser_create_exomeWalker_config with:
    output:
        "exomiser/exomeWalker_config.yml"
    log:
        "logs/exomiser/exomeWalker_config.log"
    params:
        prioritiser = "exomeWalkerPrioritiser",
        prioritiser_params = "seedGeneIds: [79738, 339829, 10715, 25790, 146845, 220136, 55997, 1767, 118856, 284086, 1482, 4838, 168507, 4087, 374618, 55329, 7547]",
        priority = "PHIVE_PRIORITY"


rule exomiser_prioritize:
    input:
        "exomiser/hiPhive_config.yml"
    output:
        "results/hiPhivePrioritiser.html"
    log:
        "logs/exomiser/hiPhive_exomiser.log"
    threads:
        2
    envmodules:
        "java/1.11.0"
    resources:
        mem_mb = get_mem_mb,
        runtime = "02:00:00"
    params:
        exomiser_jar=config["exomiser_jar"],
        exomiser_app_properties=config["exomiser_app"]
    shell:
        """
        java -Xmx4g -jar {params.exomiser_jar} --analysis {input} --spring.config.location={params.exomiser_app_properties}
        """

use rule exomiser_prioritize as exomiser_phenix_prioritize with:
    input:
        "exomiser/phenix_config.yml"
    output:
        "results/phenixPrioritiser.html"
    log:
        "logs/exomiser/phenix_exomiser.log"

use rule exomiser_prioritize as exomiser_phive_prioritize with:
    input:
        "exomiser/phive_config.yml"
    output:
        "results/phivePrioritiser.html"
    log:
        "logs/exomiser/phive_exomiser.log"

use rule exomiser_prioritize as exomiser_exomeWalker_prioritize with:
    input:
        "exomiser/exomeWalker_config.yml"
    output:
        "results/exomeWalkerPrioritiser.html"
    log:
        "logs/exomiser/exomeWalker_exomiser.log"

